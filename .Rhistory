# 载入哈尔小波估计模块
WSE_Path = paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/WaveletShrinkageEestimation.R")
print("载入哈尔小波估计模块")
print(WSE_Path)
source(WSE_Path)
source(WSE_Path)
source(WSE_Path)
source(WSE_Path)
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hat = HAT(ds1,"ut","s")
source(WSE_Path)
source(WSE_Path)
source(WSE_Path)
source(WSE_Path)
source(WSE_Path)
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hat = HAT(ds1,"ut","s")
# 载入数据
ds1 = read.table("/Users/hello/GoogleDrive/学术相关/R哈尔小波/测试数据/DS1.txt")[2]
ds1 = as.numeric(ds1$V2)
# 载入哈尔小波估计模块
WSE_Path = paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/WaveletShrinkageEestimation.R")
print("载入哈尔小波估计模块")
print(WSE_Path)
source(WSE_Path)
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hat = HAT(ds1,"ut","s")
cul_ds1 = toCulData(ds1)
# 载入数据
ds1 = read.table("/Users/hello/GoogleDrive/学术相关/R哈尔小波/测试数据/DS1.txt")[2]
ds1 = as.numeric(ds1$V2)
# 载入哈尔小波估计模块
WSE_Path = paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/WaveletShrinkageEestimation.R")
print("载入哈尔小波估计模块")
print(WSE_Path)
source(WSE_Path)
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hat = HAT(ds1,"ut","s")
cul_ds1 = toCulData(ds1)
print(typeof(cul_ds1))
print(cul_ds1[1])
print(cul_ds1[[1]])
# 载入数据
ds1 = read.table("/Users/hello/GoogleDrive/学术相关/R哈尔小波/测试数据/DS1.txt")[2]
ds1 = as.numeric(ds1$V2)
# 载入哈尔小波估计模块
WSE_Path = paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/WaveletShrinkageEestimation.R")
print("载入哈尔小波估计模块")
print(WSE_Path)
source(WSE_Path)
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hat = HAT(ds1,"ut","s")
cul_ds1 = toCulData(ds1)
print(typeof(cul_ds1))
print(cul_ds1[1])
print(cul_ds1[[1]])
cul_idata_hat = toCulData(idata_hat)
mseRes = MSE(idata_hat,cul_ds1)
print(mseRes)
idata_hat = HAT(ds1,"ut","h")
cul_idata_hat = toCulData(idata_hat)
mseRes = MSE(idata_hat,cul_ds1)
print(mseRes)
# 调用基于Fisz数据转换的哈尔小波估计
idata_hft = HFT(ds1,"none")
print(WSE_Path)
source(WSE_Path)
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hat = HAT(ds1,"ut","s")
cul_idata_hat = toCulData(idata_hat)
cul_ds1 = toCulData(ds1)
mseRes = MSE(idata_hat,cul_ds1)
print(mseRes)
idata_hat = HAT(ds1,"ut","h")
cul_idata_hat = toCulData(idata_hat)
mseRes = MSE(idata_hat,cul_ds1)
print(mseRes)
cul_ds1 = toCulData(ds1)
print(cul_ds1)
source(WSE_Path)
cul_ds1 = toCulData(ds1)
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hat = HAT(cul_ds1,"ut","s")
print(cul_ds1)
mseRes = MSE(idata_hat,cul_ds1)
print(mseRes)
idata_hat = HAT(cul_ds1,"ut","h")
mseRes = MSE(idata_hat,cul_ds1)
print(mseRes)
# 调用基于Fisz数据转换的哈尔小波估计
idata_hft = HFT(ds1,"none")
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hat = HAT(ds1,"none")
source(WSE_Path)
cul_ds1 = toCulData(ds1)
print(cul_ds1)
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hat = HAT(cul_ds1,"ut","s")
print(idata_hat)
mseRes = MSE(idata_hat,cul_ds1)
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hat = HAT(cul_ds1,"none","s")
print(idata_hat)
source(WSE_Path)
cul_ds1 = toCulData(ds1)
print(cul_ds1)
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hat = HAT(cul_ds1,"none","s")
print(idata_hat)
mseRes = MSE(idata_hat,cul_ds1)
print(mseRes)
source(WSE_Path)
cul_ds1 = toCulData(ds1)
print(cul_ds1)
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hat = HAT(cul_ds1,"ut","s")
print(idata_hat)
mseRes = MSE(idata_hat,cul_ds1)
print(mseRes)
source(WSE_Path)
cul_ds1 = toCulData(ds1)
print(cul_ds1)
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hat = HAT(cul_ds1,"ut","s")
print(idata_hat)
mseRes = MSE(idata_hat,cul_ds1)
print(mseRes)
idata_hat = HAT(cul_ds1,"ut","h")
mseRes = MSE(idata_hat,cul_ds1)
print(mseRes)
# 调用基于Fisz数据转换的哈尔小波估计
idata_hft = HFT(ds1,"none")
print(WSE_Path)
source(WSE_Path)
cul_ds1 = toCulData(ds1)
print(cul_ds1)
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hat = HAT(cul_ds1,"ut","s")
print(idata_hat)
mseRes = MSE(idata_hat,cul_ds1)
print(round(mseRes,3))
idata_hat = HAT(cul_ds1,"ut","h")
mseRes = MSE(idata_hat,cul_ds1)
print(round(mseRes,3))
# 调用基于Fisz数据转换的哈尔小波估计
idata_hft = HFT(ds1,"none")
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hat = HAT(ds1,"none")
source(WSE_Path)
cul_ds1 = toCulData(ds1)
print(cul_ds1)
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hat = HAT(cul_ds1,"ut","s")
print(idata_hat)
source(WSE_Path)
cul_ds1 = toCulData(ds1)
print(cul_ds1)
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hat = HAT(cul_ds1,"ut","s")
print(idata_hat)
mseRes = MSE(idata_hat,cul_ds1)
print(round(mseRes,3))
idata_hat = HAT(cul_ds1,"ut","h")
mseRes = MSE(idata_hat,cul_ds1)
print(round(mseRes,3))
# 调用基于Fisz数据转换的哈尔小波估计
idata_hft = HFT(ds1,"none")
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hat = HAT(ds1,"none")
# 调用基于Bartlett数据转换的哈尔小波估计
idata_hbt = HBT(ds1,"none")
# 调用无数据变换的哈尔小波估计
idata_h = H(ds1,"none")
#输出估计结果
print("ds1")
source(WSE_Path)
cul_ds1 = toCulData(ds1)
print(cul_ds1)
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hat = HFT(cul_ds1,"ut","s")
print(idata_hat)
mseRes = MSE(idata_hat,cul_ds1)
print(round(mseRes,3))
idata_hat = HFT(cul_ds1,"ut","h")
print(WSE_Path)
source(WSE_Path)
cul_ds1 = toCulData(ds1)
print(cul_ds1)
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hat = HFT(cul_ds1,"ut","s")
print(idata_hat)
mseRes = MSE(idata_hat,cul_ds1)
print(round(mseRes,3))
idata_hat = HFT(cul_ds1,"ut","h")
mseRes = MSE(idata_hat,cul_ds1)
print(round(mseRes,3))
# 调用基于Fisz数据转换的哈尔小波估计
idata_hft = HFT(ds1,"none")
source(WSE_Path)
cul_ds1 = toCulData(ds1)
print(cul_ds1)
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hat = HFT(ds1,"ut","s")
cul_idata_hat = toCulData(idata_hat)
#print(cul_idata_hat)
mseRes = MSE(cul_idata_hat,cul_ds1)
print(round(mseRes,3))
idata_hat = HFT(ds1,"ut","h")
cul_idata_hat = toCulData(idata_hat)
#print(cul_idata_hat)
mseRes = MSE(cul_idata_hat,cul_ds1)
print(round(mseRes,3))
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hat = HAT(ds1,"ut","s")
cul_idata_hat = toCulData(idata_hat)
#print(cul_idata_hat)
mseRes = MSE(cul_idata_hat,cul_ds1)
print(round(mseRes,3))
idata_hat = HAT(ds1,"ut","h")
cul_idata_hat = toCulData(idata_hat)
#print(cul_idata_hat)
mseRes = MSE(cul_idata_hat,cul_ds1)
print(round(mseRes,3))
# 调用基于Fisz数据转换的哈尔小波估计
idata_hft = HFT(ds1,"none")
# 载入数据
ds1 = read.table("/Users/hello/GoogleDrive/学术相关/R哈尔小波/测试数据/DS4.txt")[2]
ds1 = as.numeric(ds1$V2)
# 载入哈尔小波估计模块
WSE_Path = paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/WaveletShrinkageEestimation.R")
print("载入哈尔小波估计模块")
print(WSE_Path)
source(WSE_Path)
cul_ds1 = toCulData(ds1)
print(cul_ds1)
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hat = HFT(ds1,"ut","s")
cul_idata_hat = toCulData(idata_hat)
#print(cul_idata_hat)
mseRes = MSE(cul_idata_hat,cul_ds1)
print(round(mseRes,3))
idata_hat = HFT(ds1,"ut","h")
cul_idata_hat = toCulData(idata_hat)
#print(cul_idata_hat)
mseRes = MSE(cul_idata_hat,cul_ds1)
print(round(mseRes,3))
# 调用基于Fisz数据转换的哈尔小波估计
idata_hft = HFT(ds1,"none")
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hat = HAT(ds1,"none")
print(round(mseRes,3))
# 计算数据的累计值
cul_ds4 = toCulData(ds4)
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hft = H(ds4,"ldt","s")
cul_idata_hat = toCulData(idata_hat)
mseRes = MSE(cul_idata_hat,cul_ds4)
print(round(mseRes,3))
# 载入数据
dataPath = paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/DS4.txt")
ds4 = read.table(dataPath)[2]
ds4 = as.numeric(ds4$V2)
# 载入哈尔小波估计模块
WSE_Path = paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/WaveletShrinkageEestimation.R")
print("载入哈尔小波估计模块")
print(WSE_Path)
source(WSE_Path)
# 计算数据的累计值
cul_ds4 = toCulData(ds4)
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hft = H(ds4,"ldt","s")
cul_idata_hat = toCulData(idata_hat)
# 载入数据
dataPath = paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/DS4.txt")
ds4 = read.table(dataPath)[2]
# 载入数据
dataPath = paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/DS4.txt")
ds4 = read.table(dataPath)[2]
ds4 = as.numeric(ds4$V2)
# 载入哈尔小波估计模块
WSE_Path = paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/WaveletShrinkageEestimation.R")
print("载入哈尔小波估计模块")
print(WSE_Path)
source(WSE_Path)
# 计算数据的累计值
cul_ds4 = toCulData(ds4)
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hft = H(ds4,"ldt","s")
cul_idata_hat = toCulData(idata_hat)
mseRes = MSE(cul_idata_hat,cul_ds4)
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hft = H(ds4,"ldt","s")
source(WSE_Path)
# 计算数据的累计值
cul_ds4 = toCulData(ds4)
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hft = H(ds4,"ldt","s")
cul_idata_hat = toCulData(idata_hat)
mseRes = MSE(cul_idata_hat,cul_ds4)
print(round(mseRes,3))
source(WSE_Path)
# 计算数据的累计值
cul_ds4 = toCulData(ds4)
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hft = H(ds4,"ldt","s")
cul_idata_hat = toCulData(idata_hat)
mseRes = MSE(cul_idata_hat,cul_ds4)
print(round(mseRes,3))
source(WSE_Path)
# 计算数据的累计值
cul_ds4 = toCulData(ds4)
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hft = H(ds4,"ldt","s")
source(WSE_Path)
# 计算数据的累计值
cul_ds4 = toCulData(ds4)
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hft = H(ds4,"ldt","s")
cul_idata_hat = toCulData(idata_hat)
mseRes = MSE(cul_idata_hat,cul_ds4)
print(round(mseRes,3))
idata_hat = H(ds4,"ldt","h")
source(WSE_Path)
# 计算数据的累计值
cul_ds4 = toCulData(ds4)
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hft = H(ds4,"ldt","s")
cul_idata_hat = toCulData(idata_hat)
print(cul_idata_hat)
print(cul_idata_hat)
mseRes = MSE(cul_idata_hat,cul_ds4)
print(round(mseRes,3))
source(WSE_Path)
# 计算数据的累计值
cul_ds4 = toCulData(ds4)
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hft = HFT(ds4,"ldt","s")
cul_idata_hat = toCulData(idata_hat)
print(cul_idata_hat)
mseRes = MSE(cul_idata_hat,cul_ds4)
print(round(mseRes,3))
idata_hat = HFT(ds4,"ldt","h")
cul_idata_hft = toCulData(idata_hat)
print(WSE_Path)
source(WSE_Path)
# 计算数据的累计值
cul_ds4 = toCulData(ds4)
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hft = HFT(ds4,"ldt","s")
cul_idata_hat = toCulData(idata_hat)
print(cul_idata_hat)
mseRes = MSE(cul_idata_hat,cul_ds4)
print(round(mseRes,3))
idata_hat = HFT(ds4,"ldt","h")
cul_idata_hft = toCulData(idata_hat)
mseRes = MSE(cul_idata_hat,cul_ds4)
print(round(mseRes,3))
# 调用基于Fisz数据转换的哈尔小波估计
idata_hft = HFT(ds4,"none")
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hat = HAT(ds4,"none")
# 调用基于Bartlett数据转换的哈尔小波估计
idata_hbt = HBT(ds4,"none")
print(WSE_Path)
source(WSE_Path)
# 计算数据的累计值
cul_ds4 = toCulData(ds4)
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hft = HFT(ds4,"ut","s")
cul_idata_hat = toCulData(idata_hat)
print(cul_idata_hat)
mseRes = MSE(cul_idata_hat,cul_ds4)
print(round(mseRes,3))
idata_hat = HFT(ds4,"ut","h")
cul_idata_hft = toCulData(idata_hat)
mseRes = MSE(cul_idata_hat,cul_ds4)
print(round(mseRes,3))
# 调用基于Fisz数据转换的哈尔小波估计
idata_hft = HFT(ds4,"none")
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hat = HAT(ds4,"none")
# 调用基于Bartlett数据转换的哈尔小波估计
idata_hbt = HBT(ds4,"none")
# 载入数据
dataPath = paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/DS4.txt")
ds4 = read.table(dataPath)[2]
ds4 = as.numeric(ds4$V2)
# 载入哈尔小波估计模块
WSE_Path = paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/WaveletShrinkageEestimation.R")
print("载入哈尔小波估计模块")
print(WSE_Path)
source(WSE_Path)
# 计算数据的累计值
cul_ds4 = toCulData(ds4)
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hft = HFT(ds4,"ut","s")
cul_idata_hat = toCulData(idata_hat)
print(cul_idata_hat)
mseRes = MSE(cul_idata_hat,cul_ds4)
source(WSE_Path)
# 计算数据的累计值
cul_ds4 = toCulData(ds4)
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hft = HFT(ds4,"ut","s")
cul_idata_hat = toCulData(idata_hft)
print(cul_idata_hat)
mseRes = MSE(cul_idata_hat,cul_ds4)
print(round(mseRes,3))
idata_hat = HFT(ds4,"ut","h")
cul_idata_hft = toCulData(idata_hft)
mseRes = MSE(cul_idata_hat,cul_ds4)
print(round(mseRes,3))
# 调用基于Fisz数据转换的哈尔小波估计
idata_hft = HFT(ds4,"none")
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hat = HAT(ds4,"none")
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hft = HFT(ds4,"ut","s")
# 载入数据
dataPath = paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/DS4.txt")
ds4 = read.table(dataPath)[2]
ds4 = as.numeric(ds4$V2)
# 载入哈尔小波估计模块
WSE_Path = paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/WaveletShrinkageEestimation.R")
print("载入哈尔小波估计模块")
print(WSE_Path)
source(WSE_Path)
# 计算数据的累计值
cul_ds4 = toCulData(ds4)
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hft = HFT(ds4,"ut","s")
cul_idata_hft = toCulData(idata_hft)
print(cul_idata_hft)
mseRes = MSE(cul_idata_hat,cul_ds4)
print(round(mseRes,3))
idata_hft = HFT(ds4,"ut","h")
cul_idata_hft = toCulData(idata_hft)
mseRes = MSE(cul_idata_hft,cul_ds4)
print(round(mseRes,3))
# 调用基于Fisz数据转换的哈尔小波估计
idata_hft = HFT(ds4,"none")
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hat = HAT(ds4,"none")
source(WSE_Path)
# 计算数据的累计值
cul_ds4 = toCulData(ds4)
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hft = HFT(ds4,"ut","s")
cul_idata_hft = toCulData(idata_hft)
mseRes = MSE(cul_idata_hat,cul_ds4)
print(round(mseRes,3))
idata_hft = HFT(ds4,"ut","h")
cul_idata_hft = toCulData(idata_hft)
mseRes = MSE(cul_idata_hft,cul_ds4)
print(round(mseRes,3))
# 调用基于Fisz数据转换的哈尔小波估计
idata_hft = HFT(ds4,"none")
# 调用基于Anscombe数据转换的哈尔小波估计
idata_hat = HAT(ds4,"none")
